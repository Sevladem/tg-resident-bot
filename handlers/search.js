const db = require('../db/db');
const { getUserPermissions } = require('../utils/access');
const { sendCarInfo } = require('../utils/sendCarInfo');

const waitingForSearchInput = new Set(); // —é–∑–µ—Ä–∏, —â–æ –≤–≤–æ–¥—è—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—à—É–∫—É
const searchCache = new Map(); // chatId -> –º–∞—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

async function doSearch(bot, msg ) {
  const userId = msg.from.id;
  const chatId = msg.chat.id;

  if (!msg.text || typeof msg.text !== 'string') {
    await bot.sendMessage(msg.chat.id, '–ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ª–∏—à–µ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø–æ—à—É–∫.');
  return;
  }

  const query = msg.text.trim();

  if (!query) {
    return bot.sendMessage(chatId, '–ü–æ—Ä–æ–∂–Ω—ñ–π –∑–∞–ø–∏—Ç, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
  }

  await bot.sendChatAction(chatId, 'typing');
  //await new Promise(resolve => setTimeout(resolve, 500));
  const results = await db.searchCarByNumber(query);

  if (!results.length) {
    return bot.sendMessage(chatId, '–ó–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.');
  }

  searchCache.set(chatId, results);

  const perms = await getUserPermissions(userId);

  if (results.length === 1) {
    const row = results[0];
    return sendCarInfo(bot, chatId, row, perms);
  }

  // –Ø–∫—â–æ –¥–µ–∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ ‚Äî —Ñ–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏
  const inlineKeyboard = results.map((row, i) => {
    const carNumber = row[5] || '–ù–µ–º–∞—î –Ω–æ–º–µ—Ä–∞';
    return [{ text: `${i + 1}. ${carNumber}`, callback_data: `car_info_${i}` }];
  });

  return bot.sendMessage(chatId, '–ó–Ω–∞–π–¥–µ–Ω–æ –¥–µ–∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Å—ñ–≤. –û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä:', {
    reply_markup: {
      inline_keyboard: inlineKeyboard,
    }
  });
}

async function searchHandler(bot, msg) {
  
  const userId = msg.from.id;

  if (msg.text === '/search') {
    waitingForSearchInput.add(userId);
    return bot.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ–≤–Ω—ñ—Å—Ç—é, –∞–±–æ —á–∞—Å—Ç–∫–æ–≤–æ –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤');
  }

  if (waitingForSearchInput.has(userId)) {
    waitingForSearchInput.delete(userId);
  }

  return doSearch(bot, msg);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ callback_query, –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
async function handleCallbackQuery(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const data = callbackQuery.data;

  if (data.startsWith('car_info_')) {
    const index = Number(data.split('_')[2]);
    const results = searchCache.get(chatId);

    if (!results || !results[index]) {
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞.' });
      return;
    }

    const row = results[index];
    const perms = await getUserPermissions(userId);
    //await bot.deleteMessage(chatId, messageId);
    await sendCarInfo(bot, chatId, row, perms);

    return bot.answerCallbackQuery(callbackQuery.id);
  }

  if (data.startsWith('morePhotos_')) {
    const id = data.split('_')[1];
    const urls = await db.getPhotoByID(id);
    if (!urls || urls.length <= 1) {
      await bot.sendMessage(chatId, '–ë—ñ–ª—å—à–µ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î.');
      return;
    }

    // –í—Å—ñ —Ñ–æ—Ç–æ, –∫—Ä—ñ–º –ø–µ—Ä—à–æ–≥–æ
    const additionalUrls = urls.slice(1);

    // –§–æ—Ä–º—É—î–º–æ –º–∞—Å–∏–≤ –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
    const mediaGroup = additionalUrls.map((url, index) => ({
      type: 'photo',
      media: url,
     ...(index === 0 ? { caption: 'üì∏ –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ–æ—Ç–æ –∞–≤—Ç–æ' } : {}),
    }));

    await bot.sendMediaGroup(chatId, mediaGroup);

    return bot.answerCallbackQuery(callbackQuery.id);
  }

}

module.exports = { searchHandler, handleCallbackQuery };
